Microsoft Windows [版本 10.0.15063]
(c) 2017 Microsoft Corporation。保留所有权利。

C:\Users\Administrator>python learning.py
Ready for Python code on port 39093...
127.0.0.1 - - [14/Aug/2017 15:42:56] code 400, message Bad request version ('\x12\x8c\xc8`q\xfd±\xe7')
127.0.0.1 - - [14/Aug/2017 15:42:56] " \xce  \xca`\xdd>\xbcO\x90\x85á\xb5\xda` \x8c\xc8`q\xfd±\xe7" 400 -
127.0.0.1 - - [14/Aug/2017 15:42:56] code 400, message Bad request syntax ('\x16\x03\x01\x00\xa3\x01\x00\x00\x9f\x03\x02\xe5\xa6\x02\x8b\xd6\xfb\xd9S5\xe7 i\xbf\x05\xe2\xd1\x897\x96 \xd6\x82M·\x0e¨¨t\xa1\x15\\\xc5\x00\x00\x10\xc0\t\xc0\x13\xc0')
127.0.0.1 - - [14/Aug/2017 15:42:56] " \xa3  \x9f\xe5\xa6\x8b\xd6\xfb\xd9S5\xe7 i\xbf\xe2\xd1\x897\x96 \xd6\x82M·¨¨t\xa1\\xc5  \xc0  \xc0\xc0" 400 -
Traceback (most recent call last):
  File "learning.py", line 106, in <module>
    main()
  File "learning.py", line 39, in main
    httpd.serve_forever()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socketserver.py", line 232, in serve_forever
    ready = selector.select(poll_interval)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\selectors.py", line 323, in select
    r, w, _ = self._select(self._readers, self._writers, [], timeout)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\selectors.py", line 314, in _select
    r, w, x = select.select(r, w, w, timeout)
KeyboardInterrupt

C:\Users\Administrator>
C:\Users\Administrator>
C:\Users\Administrator>
C:\Users\Administrator>
C:\Users\Administrator>
C:\Users\Administrator>python
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>>
>>> height = 1.75
>>> weight = 80.5
>>> bmi = 80/1.75
>>> print(bmi)
45.714285714285715
>>> print(bmi)
^C
C:\Users\Administrator>python
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> h = 1.75
>>> w = 80.5
>>> bmi = w/(h*h)
>>> print(bmi)
26.285714285714285
>>> if bmi<18.5:
... print('过轻')
  File "<stdin>", line 2
    print('过轻')
        ^
IndentationError: expected an indented block
>>> if bmi<18.5:
... print('过轻') elif
  File "<stdin>", line 2
    print('过轻') elif
        ^
IndentationError: expected an indented block
>>> if bmi<18.5: print('过轻') elif bmi<25: print(正常)
  File "<stdin>", line 1
    if bmi<18.5: print('过轻') elif bmi<25: print(正常)
                                ^
SyntaxError: invalid syntax
>>> if bmi<18.5: print('过轻') elif bmi<25: print(正常)
  File "<stdin>", line 1
    if bmi<18.5: print('过轻') elif bmi<25: print(正常)
                                ^
SyntaxError: invalid syntax
>>> if bmi<18.5: print('过轻') elif bmi<25: print(正常)
  File "<stdin>", line 1
    if bmi<18.5: print('过轻') elif bmi<25: print(正常)
                                ^
SyntaxError: invalid syntax
>>> if bmi<18.5: print('过轻')
... elif bmi<25: print('正常')
... elif bmi<28: print('过重')
... elif bmi<32: print('肥胖')
... else: print('严重肥胖')
...
过重
>>> rang(10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'rang' is not defined
>>> range(10)
range(0, 10)
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> print(range(10))
range(0, 10)
>>> L = ['Bart', 'Lisa', 'Adam']
>>> for name in L:
...  print(name)
...
Bart
Lisa
Adam
>>> s = set([1, 2, 3])
>>> s
{1, 2, 3}
>>> s = {1,2,3}
>>> s
{1, 2, 3}
>>> s = {1,2,3,4}
>>> s = {1,2,3,4,5}
>>> s = {1,2,3,4,5,3}
>>> s
{1, 2, 3, 4, 5}
>>> s = {1,2,3,[1,2]}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> d = {"aa":123, "bb":11}
>>> d
{'aa': 123, 'bb': 11}
>>> d = {"aa":123, "bb":11, (1,2,3):33}
>>> d
{'aa': 123, (1, 2, 3): 33, 'bb': 11}
>>> d = {"aa":123, "bb":11, (1,2,3):33, (1,[2,3]):44}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> d = {"aa":123, "bb":11, (1,2,3):33, (1,(2,3)):44}
>>> d
{'aa': 123, (1, 2, 3): 33, (1, (2, 3)): 44, 'bb': 11}
>>> abs
<built-in function abs>
>>> abs(21.55)
21.55
>>> max(1,1,3,-1,4)
4
>>> n1 = 255
>>> n2 = 1000
>>> s1 = hex(n1)
>>> s1
'0xff'
>>> s2 = hex(n2)
>>> s2
'0x3e8'
>>> s1 = str(hex(n1))
>>> s1
'0xff'
>>> s2
'0x3e8'
>>> def my_abs(x):
...  if x>=0:
...   return 0
...  else:
...   return -x
...
...
...
...
>>> my_abs(-2)
2
>>> from
^C
C:\Users\Administrator>python
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from ac import my_abs
>>> my_abs(11)
11
>>> pass
>>> isinstance
<built-in function isinstance>
>>> import math
>>> math.sin(30)
-0.9880316240928618
>>> math.vos(30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'math' has no attribute 'vos'
>>> math.cos(30)
0.15425144988758405
>>> math.sin(0)
0.0
>>> math.cos(0)
1.0
>>> math.cos(1)
0.5403023058681398
>>> math.cos(2)
-0.4161468365471424
>>> math.sin(0.3)
0.29552020666133955
>>> math.sin(0.4)
0.3894183423086505
>>> math.sin(1)
0.8414709848078965
>>> math.sin(360)
0.9589157234143065
>>> math.sin(90)
0.8939966636005579
>>> math.sin(0.90)
0.7833269096274834
>>> math.sin(3.14/6)
0.4997701026431024
>>> math.sin(math.PI/6)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'math' has no attribute 'PI'
>>> math.sin(math.pi/6)
0.49999999999999994
>>> import math
>>>
>>> def quadratic(a, b, c):
...  s = 2*b - 4*a*c
^C
C:\Users\Administrator>python
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import math

>>> def quadratic(a, b, c):
...  s = 2*b - 4*a*c
...  if s > 0 :
...   pass
...  elif s == 0 :
...   pass
...  else :
...   pass
...   pass
...

>>> def quadratic(a, b, c):
...  s = 2*b - 4*a*c
...  s = 2*b - 4*a*c
...
>>>
>>> def quadratic(a, b, c):
...  s = b*b - 4*a*c
...  if s>0:
...   x1 = (-b-math.sqrt(s))/(2*a)
...   x2 = (-b+math.sqrt(s))/(2*a)
...   print(x1, x2)
...   return x1,x2
...  elif s == 0:
...   x = -b/(2*a)
...   print(x)
...   return x
...  else :
...   print('无解')
...   return
...
>>> quadratic(2,3,1)
-1.0 -0.5
(-1.0, -0.5)
>>> quadratic(1,3,-4)
-4.0 1.0
(-4.0, 1.0)
>>> quadratic(1,2,1)
-1.0
-1.0

>>> def fact(n):
...  if n == 1:
...   return 1
...  return n * fact(n-1)
...
>>> fact(10)
3628800
>>> fact(5)
120
>>> fact(500)

>>> fact(800)

>>> fact(900)

>>> fact(950)

>>> fact(990)


>>> fact(998)

>>> def move(n, a, b, c):
...
...
  File "<stdin>", line 3

    ^
IndentationError: expected an indented block
>>>
>>> exit()

C:\Users\Administrator>